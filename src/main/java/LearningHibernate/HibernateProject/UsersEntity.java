package LearningHibernate.HibernateProject;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

// You apply @Entity to a class to indicate that the class represents a database table.
@Entity(name = "users")
// You use @Table to specify the name of the database table (if itâ€™s different from the class name) or other 
//table-related settings (like schema or catalog).
@Table(name = "users")
public class UsersEntity {
	
	//Primary key
	@Id
	@Column(name = "user_id")
	int userId;
	/**
	 * -> The annotation @GeneratedValue(strategy = GenerationType.IDENTITY) in Hibernate and JPA is used to specify 
	 * that the primary key of an entity should be automatically generated by the database, with an auto-incrementing 
	 * approach.
	 * 
	 * -> When you use GenerationType.IDENTITY, the database automatically generates and assigns a new ID to each new 
	 * row in the table. This approach is particularly useful when working with databases that support 
	 * auto-incrementing columns (e.g., MySQL, PostgreSQL).
	 */
	@Column(name = "first_name")
	String firstName;
	
	@Column(name = "last_name")
	String lastName;
	
	@Column(name = "email_id")
	String emailId;
	
	@Column(name = "age")
	int age;
	
	public UsersEntity() {
		super();
	}

	public UsersEntity(String firstName, String lastName, String emailId, int age) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.emailId = emailId;
		this.age = age;
	}

	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	@Override
	public String toString() {
		return "UsersEntity [userId=" + userId + ", firstName=" + firstName + ", lastName=" + lastName + ", emailId="
				+ emailId + ", age=" + age + "]";
	}
}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * The @MappedBy attribute in JPA and Hibernate is used in bidirectional relationships to specify the owning side 
 * of the relationship.
 * 
 * Explanation in Simple Terms:
 * -> In a bidirectional relationship, such as OneToMany/ManyToOne or OneToOne, both entities have a reference to 
 * each other. This can create ambiguity about which side is responsible for managing the relationship in the 
 * database. The @MappedBy attribute helps resolve this by designating the non-owning side of the relationship.
 * 
 * -> The owning side is the one that contains the foreign key in the database.
 * -> The non-owning side uses @MappedBy to indicate which field in the owning entity manages the relationship.
 * 
 * Example: One-to-Many Relationship:
 * -> Let's say we have two entities: Department and Employee. Each department has many employees, and each employee
 *  belongs to a department.

@Entity
public class Department {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToMany(mappedBy = "department")
    private List<Employee> employees;

    // other fields, constructors, getters, setters
}

@Entity
public class Employee {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "department_id")
    private Department department;

    // other fields, constructors, getters, setters
}

In this example:

-> In Department, mappedBy = "department" specifies that the employees list is mapped by the department field in the 
Employee entity. This tells Hibernate that the Employee side (where the foreign key resides) owns the relationship.

-> In Employee, the @JoinColumn(name = "department_id") annotation specifies that department_id is the foreign key 
column.

Summary:
-> The @MappedBy attribute points to the field that owns the relationship, ensuring only one side maintains the 
foreign key column. This reduces redundancy and ensures consistency in bidirectional relationships.
 */